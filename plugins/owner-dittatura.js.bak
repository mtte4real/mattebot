let handler = async (m, { conn, groupMetadata, participants, isBotAdmin }) => {

    if (!isBotAdmin) {
        await conn.sendMessage(m.chat, { text: "❌ Il bot deve essere amministratore per eseguire questo comando!" });
        return;
    }

    const ownerGroup = groupMetadata.owner || null; 
    const comandoEseguitoDa = m.sender;

    // Prende tutti gli admin tranne il bot, il founder e chi ha eseguito il comando
    const admins = participants
        .filter(p => p.admin === 'admin' || p.admin === 'superadmin')
        .map(a => a.id);
    const adminsToRemove = admins.filter(admin => 
        admin !== conn.user.jid && 
        admin !== ownerGroup &&
        admin !== comandoEseguitoDa
    );

    if (adminsToRemove.length === 0) {
        await conn.sendMessage(m.chat, { text: "⚠️ Non ci sono amministratori da rimuovere, oltre al bot, il founder o chi ha eseguito il comando." });
        return;
    }

    // Messaggio iniziale
    await conn.sendMessage(m.chat, { text: "⚠️ Procedo con la dittatura." });

    // Rimozione degli admin
    for (let admin of adminsToRemove) {
        try {
            await conn.groupParticipantsUpdate(m.chat, [admin], 'demote');
            await new Promise(resolve => setTimeout(resolve, 1000)); // Pausa tra le operazioni
        } catch (err) {
            console.error(`Errore nella rimozione di ${admin}:`, err);
        }
    }

    await conn.sendMessage(m.chat, { text: "Ora ci sono io come vostro dittatore, inchinatevi al vostro Youns" });
};

handler.command = /^dittatura$/i; 
handler.group = true; 
handler.rowner = true; 

export default handler;
